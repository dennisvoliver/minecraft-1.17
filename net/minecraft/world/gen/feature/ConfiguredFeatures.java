package net.minecraft.world.gen.feature;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.OptionalInt;
import java.util.function.Supplier;
import net.minecraft.block.BigDripleafBlock;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.CaveVines;
import net.minecraft.block.CaveVinesHeadBlock;
import net.minecraft.block.MushroomBlock;
import net.minecraft.block.SmallDripleafBlock;
import net.minecraft.block.SweetBerryBushBlock;
import net.minecraft.fluid.FluidState;
import net.minecraft.fluid.Fluids;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.state.property.Properties;
import net.minecraft.structure.processor.StructureProcessorLists;
import net.minecraft.tag.BlockTags;
import net.minecraft.util.Identifier;
import net.minecraft.util.collection.DataPool;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.VerticalSurfaceType;
import net.minecraft.util.math.floatprovider.ClampedNormalFloatProvider;
import net.minecraft.util.math.floatprovider.UniformFloatProvider;
import net.minecraft.util.math.intprovider.BiasedToBottomIntProvider;
import net.minecraft.util.math.intprovider.ClampedIntProvider;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.util.registry.BuiltinRegistries;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.Heightmap;
import net.minecraft.world.gen.CountConfig;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.ProbabilityConfig;
import net.minecraft.world.gen.YOffset;
import net.minecraft.world.gen.decorator.CarvingMaskDecoratorConfig;
import net.minecraft.world.gen.decorator.CaveSurfaceDecoratorConfig;
import net.minecraft.world.gen.decorator.ChanceDecoratorConfig;
import net.minecraft.world.gen.decorator.ConfiguredDecorator;
import net.minecraft.world.gen.decorator.CountExtraDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseBiasedDecoratorConfig;
import net.minecraft.world.gen.decorator.CountNoiseDecoratorConfig;
import net.minecraft.world.gen.decorator.Decorator;
import net.minecraft.world.gen.decorator.DecoratorConfig;
import net.minecraft.world.gen.decorator.HeightmapDecoratorConfig;
import net.minecraft.world.gen.decorator.NopeDecoratorConfig;
import net.minecraft.world.gen.decorator.RangeDecoratorConfig;
import net.minecraft.world.gen.decorator.WaterDepthThresholdDecoratorConfig;
import net.minecraft.world.gen.feature.size.ThreeLayersFeatureSize;
import net.minecraft.world.gen.feature.size.TwoLayersFeatureSize;
import net.minecraft.world.gen.foliage.AcaciaFoliagePlacer;
import net.minecraft.world.gen.foliage.BlobFoliagePlacer;
import net.minecraft.world.gen.foliage.BushFoliagePlacer;
import net.minecraft.world.gen.foliage.DarkOakFoliagePlacer;
import net.minecraft.world.gen.foliage.JungleFoliagePlacer;
import net.minecraft.world.gen.foliage.LargeOakFoliagePlacer;
import net.minecraft.world.gen.foliage.MegaPineFoliagePlacer;
import net.minecraft.world.gen.foliage.PineFoliagePlacer;
import net.minecraft.world.gen.foliage.RandomSpreadFoliagePlacer;
import net.minecraft.world.gen.foliage.SpruceFoliagePlacer;
import net.minecraft.world.gen.heightprovider.BiasedToBottomHeightProvider;
import net.minecraft.world.gen.heightprovider.UniformHeightProvider;
import net.minecraft.world.gen.heightprovider.VeryBiasedToBottomHeightProvider;
import net.minecraft.world.gen.placer.ColumnPlacer;
import net.minecraft.world.gen.placer.DoublePlantPlacer;
import net.minecraft.world.gen.placer.SimpleBlockPlacer;
import net.minecraft.world.gen.stateprovider.ForestFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PillarBlockStateProvider;
import net.minecraft.world.gen.stateprovider.PlainsFlowerBlockStateProvider;
import net.minecraft.world.gen.stateprovider.RandomizedIntBlockStateProvider;
import net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider;
import net.minecraft.world.gen.stateprovider.WeightedBlockStateProvider;
import net.minecraft.world.gen.treedecorator.AlterGroundTreeDecorator;
import net.minecraft.world.gen.treedecorator.BeehiveTreeDecorator;
import net.minecraft.world.gen.treedecorator.CocoaBeansTreeDecorator;
import net.minecraft.world.gen.treedecorator.LeavesVineTreeDecorator;
import net.minecraft.world.gen.treedecorator.TrunkVineTreeDecorator;
import net.minecraft.world.gen.trunk.BendingTrunkPlacer;
import net.minecraft.world.gen.trunk.DarkOakTrunkPlacer;
import net.minecraft.world.gen.trunk.ForkingTrunkPlacer;
import net.minecraft.world.gen.trunk.GiantTrunkPlacer;
import net.minecraft.world.gen.trunk.LargeOakTrunkPlacer;
import net.minecraft.world.gen.trunk.MegaJungleTrunkPlacer;
import net.minecraft.world.gen.trunk.StraightTrunkPlacer;

public class ConfiguredFeatures {
   public static final ConfiguredFeature<?, ?> END_SPIKE;
   public static final ConfiguredFeature<?, ?> END_GATEWAY;
   public static final ConfiguredFeature<?, ?> END_GATEWAY_DELAYED;
   public static final ConfiguredFeature<?, ?> CHORUS_PLANT;
   public static final ConfiguredFeature<?, ?> END_ISLAND;
   public static final ConfiguredFeature<?, ?> END_ISLAND_DECORATED;
   public static final ConfiguredFeature<?, ?> DELTA;
   public static final ConfiguredFeature<?, ?> SMALL_BASALT_COLUMNS;
   public static final ConfiguredFeature<?, ?> LARGE_BASALT_COLUMNS;
   public static final ConfiguredFeature<?, ?> BASALT_BLOBS;
   public static final ConfiguredFeature<?, ?> BLACKSTONE_BLOBS;
   public static final ConfiguredFeature<?, ?> GLOWSTONE_EXTRA;
   public static final ConfiguredFeature<?, ?> GLOWSTONE;
   public static final ConfiguredFeature<?, ?> CRIMSON_FOREST_VEGETATION;
   public static final ConfiguredFeature<?, ?> WARPED_FOREST_VEGETATION;
   public static final ConfiguredFeature<?, ?> NETHER_SPROUTS;
   public static final ConfiguredFeature<?, ?> TWISTING_VINES;
   public static final ConfiguredFeature<?, ?> WEEPING_VINES;
   public static final ConfiguredFeature<?, ?> BASALT_PILLAR;
   public static final ConfiguredFeature<?, ?> SEAGRASS_COLD;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_COLD;
   public static final ConfiguredFeature<?, ?> SEAGRASS_NORMAL;
   public static final ConfiguredFeature<?, ?> SEAGRASS_RIVER;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP;
   public static final ConfiguredFeature<?, ?> SEAGRASS_SWAMP;
   public static final ConfiguredFeature<?, ?> SEAGRASS_WARM;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_WARM;
   public static final ConfiguredFeature<?, ?> SEA_PICKLE;
   public static final ConfiguredFeature<?, ?> ICE_SPIKE;
   public static final ConfiguredFeature<?, ?> ICE_PATCH;
   public static final ConfiguredFeature<?, ?> FOREST_ROCK;
   public static final ConfiguredFeature<?, ?> SEAGRASS_SIMPLE;
   public static final ConfiguredFeature<?, ?> ICEBERG_PACKED;
   public static final ConfiguredFeature<?, ?> ICEBERG_BLUE;
   public static final ConfiguredFeature<?, ?> KELP_COLD;
   public static final ConfiguredFeature<?, ?> KELP_WARM;
   public static final ConfiguredFeature<?, ?> BLUE_ICE;
   public static final ConfiguredFeature<?, ?> BAMBOO_LIGHT;
   public static final ConfiguredFeature<?, ?> BAMBOO;
   public static final ConfiguredFeature<?, ?> VINES;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_VINES;
   public static final ConfiguredFeature<?, ?> LAKE_WATER;
   public static final ConfiguredFeature<?, ?> LAKE_LAVA;
   public static final ConfiguredFeature<?, ?> DISK_CLAY;
   public static final ConfiguredFeature<?, ?> DISK_GRAVEL;
   public static final ConfiguredFeature<?, ?> DISK_SAND;
   public static final ConfiguredFeature<?, ?> FREEZE_TOP_LAYER;
   public static final ConfiguredFeature<?, ?> BONUS_CHEST;
   public static final ConfiguredFeature<?, ?> VOID_START_PLATFORM;
   public static final ConfiguredFeature<?, ?> MONSTER_ROOM;
   public static final ConfiguredFeature<?, ?> DESERT_WELL;
   private static final ImmutableList<Identifier> FOSSIL_STRUCTURES;
   private static final ImmutableList<Identifier> FOSSIL_OVERLAY_STRUCTURES;
   public static final ConfiguredFeature<?, ?> FOSSIL;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_FOSSIL_UPPER;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_FOSSIL_LOWER;
   public static final ConfiguredFeature<?, ?> SPRING_LAVA_DOUBLE;
   public static final ConfiguredFeature<?, ?> SPRING_LAVA;
   public static final ConfiguredFeature<?, ?> SPRING_DELTA;
   public static final ConfiguredFeature<?, ?> SPRING_CLOSED;
   public static final ConfiguredFeature<?, ?> SPRING_CLOSED_DOUBLE;
   public static final ConfiguredFeature<?, ?> SPRING_OPEN;
   public static final ConfiguredFeature<?, ?> SPRING_WATER;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_SPRING_WATER;
   public static final ConfiguredFeature<?, ?> PILE_HAY;
   public static final ConfiguredFeature<?, ?> PILE_MELON;
   public static final ConfiguredFeature<?, ?> PILE_SNOW;
   public static final ConfiguredFeature<?, ?> PILE_ICE;
   public static final ConfiguredFeature<?, ?> PILE_PUMPKIN;
   public static final ConfiguredFeature<?, ?> PATCH_FIRE;
   public static final ConfiguredFeature<?, ?> PATCH_SOUL_FIRE;
   public static final ConfiguredFeature<?, ?> PATCH_BROWN_MUSHROOM;
   public static final ConfiguredFeature<?, ?> PATCH_RED_MUSHROOM;
   public static final ConfiguredFeature<?, ?> PATCH_CRIMSON_ROOTS;
   public static final ConfiguredFeature<?, ?> PATCH_SUNFLOWER;
   public static final ConfiguredFeature<?, ?> PATCH_PUMPKIN;
   public static final ConfiguredFeature<?, ?> PATCH_TAIGA_GRASS;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_BUSH;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_PLAIN;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_FOREST;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_SAVANNA;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_NORMAL;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA_2;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_JUNGLE;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_2;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_MELON;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_SPARSE;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_DECORATED;
   public static final ConfiguredFeature<?, ?> PATCH_WATERLILLY;
   public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS_2;
   public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS;
   public static final ConfiguredFeature<?, ?> PATCH_LARGE_FERN;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DESERT;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DECORATED;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_SWAMP;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_DESERT;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NETHER;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NETHER;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NORMAL;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NORMAL;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_TAIGA;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_TAIGA;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_GIANT;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_GIANT;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_SWAMP;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_SWAMP;
   public static final ImmutableList<OreFeatureConfig.Target> IRON_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> REDSTONE_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> GOLD_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> DIAMOND_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> LAPIS_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> EMERALD_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> COPPER_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> COAL_ORE_TARGETS;
   public static final ImmutableList<OreFeatureConfig.Target> INFESTED_TARGETS;
   public static final OreFeatureConfig IRON_CONFIG;
   public static final OreFeatureConfig REDSTONE_CONFIG;
   public static final ConfiguredFeature<?, ?> ORE_MAGMA;
   public static final ConfiguredFeature<?, ?> ORE_SOUL_SAND;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_DELTAS;
   public static final ConfiguredFeature<?, ?> ORE_QUARTZ_DELTAS;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_QUARTZ_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_GRAVEL_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_BLACKSTONE;
   public static final ConfiguredFeature<?, ?> ORE_DIRT;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIRT;
   public static final ConfiguredFeature<?, ?> ORE_GRAVEL;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GRAVEL;
   public static final ConfiguredFeature<?, ?> ORE_GRANITE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GRANITE;
   public static final ConfiguredFeature<?, ?> ORE_DIORITE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIORITE;
   public static final ConfiguredFeature<?, ?> ORE_ANDESITE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_ANDESITE;
   public static final ConfiguredFeature<?, ?> ORE_TUFF;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_TUFF;
   public static final ConfiguredFeature<?, ?> ORE_DEEPSLATE;
   public static final ConfiguredFeature<?, ?> ORE_COAL;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COAL_UPPER;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COAL_LOWER;
   public static final ConfiguredFeature<?, ?> ORE_IRON;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_UPPER;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_MIDDLE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_IRON_SMALL;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_EXTRA;
   public static final ConfiguredFeature<?, ?> ORE_GOLD;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_GOLD;
   public static final ConfiguredFeature<?, ?> ORE_REDSTONE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_REDSTONE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_REDSTONE_LOWER;
   public static final ConfiguredFeature<?, ?> ORE_DIAMOND;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIAMOND;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_DIAMOND_LARGE;
   public static final ConfiguredFeature<?, ?> ORE_LAPIS;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_LAPIS;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_LAPIS_BURIED;
   public static final ConfiguredFeature<?, ?> ORE_INFESTED;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_INFESTED;
   public static final ConfiguredFeature<?, ?> ORE_EMERALD;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_EMERALD;
   public static final ConfiguredFeature<?, ?> ORE_DEBRIS_LARGE;
   public static final ConfiguredFeature<?, ?> ORE_DEBRIS_SMALL;
   public static final ConfiguredFeature<?, ?> ORE_COPPER;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_ORE_COPPER;
   public static final ConfiguredFeature<?, ?> ORE_CLAY;
   public static final ConfiguredFeature<?, ?> DRIPSTONE_CLUSTER;
   public static final ConfiguredFeature<?, ?> LARGE_DRIPSTONE;
   public static final ConfiguredFeature<?, ?> SMALL_DRIPSTONE;
   public static final ConfiguredFeature<?, ?> RARE_DRIPSTONE_CLUSTER;
   public static final ConfiguredFeature<?, ?> RARE_SMALL_DRIPSTONE;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_UNDERWATER_MAGMA;
   public static final ConfiguredFeature<?, ?> GLOW_LICHEN;
   public static final ConfiguredFeature<?, ?> PROTOTYPE_GLOW_LICHEN;
   public static final ConfiguredFeature<?, ?> CRIMSON_FUNGI;
   public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> CRIMSON_FUNGI_PLANTED;
   public static final ConfiguredFeature<?, ?> WARPED_FUNGI;
   public static final ConfiguredFeature<HugeFungusFeatureConfig, ?> WARPED_FUNGI_PLANTED;
   public static final ConfiguredFeature<?, ?> HUGE_BROWN_MUSHROOM;
   public static final ConfiguredFeature<?, ?> HUGE_RED_MUSHROOM;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> DARK_OAK;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> ACACIA;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> SPRUCE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> PINE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_TREE_NO_VINE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_JUNGLE_TREE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_SPRUCE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> MEGA_PINE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> SUPER_BIRCH_BEES_0002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> SWAMP_OAK;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> JUNGLE_BUSH;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> AZALEA_TREE;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_0002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> OAK_BEES_005;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_0002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> BIRCH_BEES_005;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_0002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_002;
   public static final ConfiguredFeature<TreeFeatureConfig, ?> FANCY_OAK_BEES_005;
   public static final ConfiguredFeature<?, ?> FLOWER_WARM;
   public static final ConfiguredFeature<?, ?> FLOWER_DEFAULT;
   public static final ConfiguredFeature<?, ?> FLOWER_FOREST;
   public static final ConfiguredFeature<?, ?> FLOWER_SWAMP;
   public static final ConfiguredFeature<?, ?> FLOWER_PLAIN;
   public static final ConfiguredFeature<?, ?> FLOWER_PLAIN_DECORATED;
   private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_VEGETATION_CONFIGS;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION_COMMON;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION;
   public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_BROWN;
   public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_RED;
   public static final ConfiguredFeature<?, ?> WARM_OCEAN_VEGETATION;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_TREES;
   public static final ConfiguredFeature<?, ?> TAIGA_VEGETATION;
   public static final ConfiguredFeature<?, ?> TREES_BADLANDS;
   public static final ConfiguredFeature<?, ?> TREES_SNOWY;
   public static final ConfiguredFeature<?, ?> TREES_SWAMP;
   public static final ConfiguredFeature<?, ?> TREES_SHATTERED_SAVANNA;
   public static final ConfiguredFeature<?, ?> TREES_SAVANNA;
   public static final ConfiguredFeature<?, ?> BIRCH_TALL;
   public static final ConfiguredFeature<?, ?> TREES_BIRCH;
   public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN_EDGE;
   public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN;
   public static final ConfiguredFeature<?, ?> TREES_WATER;
   public static final ConfiguredFeature<?, ?> BIRCH_OTHER;
   public static final ConfiguredFeature<?, ?> PLAIN_VEGETATION;
   public static final ConfiguredFeature<?, ?> TREES_JUNGLE_EDGE;
   public static final ConfiguredFeature<?, ?> TREES_GIANT_SPRUCE;
   public static final ConfiguredFeature<?, ?> TREES_GIANT;
   public static final ConfiguredFeature<?, ?> TREES_JUNGLE;
   public static final ConfiguredFeature<?, ?> BAMBOO_VEGETATION;
   public static final ConfiguredFeature<?, ?> MUSHROOM_FIELD_VEGETATION;
   public static final ConfiguredFeature<?, ?> ROOTED_AZALEA_TREES;
   private static final WeightedBlockStateProvider RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER;
   private static final RandomizedIntBlockStateProvider RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER;
   public static final ConfiguredFeature<GrowingPlantFeatureConfig, ?> CAVE_VINE;
   public static final ConfiguredFeature<GrowingPlantFeatureConfig, ?> CAVE_VINE_IN_MOSS;
   public static final ConfiguredFeature<?, ?> CAVE_VINES;
   public static final ConfiguredFeature<SimpleBlockFeatureConfig, ?> MOSS_VEGETATION;
   public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH;
   public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH_BONEMEAL;
   public static final ConfiguredFeature<?, ?> LUSH_CAVES_VEGETATION;
   public static final ConfiguredFeature<SimpleRandomFeatureConfig, ?> DRIPLEAF;
   public static final ConfiguredFeature<?, ?> CLAY_WITH_DRIPLEAVES;
   public static final ConfiguredFeature<?, ?> CLAY_POOL_WITH_DRIPLEAVES;
   public static final ConfiguredFeature<?, ?> LUSH_CAVES_CLAY;
   public static final ConfiguredFeature<VegetationPatchFeatureConfig, ?> MOSS_PATCH_CEILING;
   public static final ConfiguredFeature<?, ?> LUSH_CAVES_CEILING_VEGETATION;
   public static final ConfiguredFeature<?, ?> SPORE_BLOSSOM;
   public static final ConfiguredFeature<?, ?> CLASSIC_VINES_CAVE_FEATURE;
   public static final ConfiguredFeature<?, ?> AMETHYST_GEODE;

   static DataPool.Builder<BlockState> method_35926() {
      return DataPool.builder();
   }

   private static ConfiguredFeature<GrowingPlantFeatureConfig, ?> createBigDripleafFeature(Direction blockDirection) {
      return Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 5), 2).add(ConstantIntProvider.create(1), 1).build(), Direction.UP, new SimpleBlockStateProvider((BlockState)Blocks.BIG_DRIPLEAF_STEM.getDefaultState().with(Properties.HORIZONTAL_FACING, blockDirection)), new SimpleBlockStateProvider((BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(Properties.HORIZONTAL_FACING, blockDirection)), true));
   }

   private static ConfiguredFeature<SimpleBlockFeatureConfig, ?> createSmallDripleafFeature() {
      return Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(method_35926().add(ConfiguredFeatures.States.SMALL_DRIPLEAF_EAST, 1).add(ConfiguredFeatures.States.SMALL_DRIPLEAF_WEST, 1).add(ConfiguredFeatures.States.SMALL_DRIPLEAF_NORTH, 1).add(ConfiguredFeatures.States.SMALL_DRIPLEAF_SOUTH, 1))));
   }

   private static <FC extends FeatureConfig> ConfiguredFeature<FC, ?> register(String id, ConfiguredFeature<FC, ?> configuredFeature) {
      return (ConfiguredFeature)Registry.register(BuiltinRegistries.CONFIGURED_FEATURE, (String)id, configuredFeature);
   }

   static {
      END_SPIKE = register("end_spike", Feature.END_SPIKE.configure(new EndSpikeFeatureConfig(false, ImmutableList.of(), (BlockPos)null)));
      END_GATEWAY = register("end_gateway", (ConfiguredFeature)((ConfiguredFeature)Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig(ServerWorld.END_SPAWN_POS, true)).decorate(Decorator.END_GATEWAY.configure(DecoratorConfig.DEFAULT)).decorate(ConfiguredFeatures.Decorators.HEIGHTMAP).spreadHorizontally()).applyChance(700));
      END_GATEWAY_DELAYED = register("end_gateway_delayed", Feature.END_GATEWAY.configure(EndGatewayFeatureConfig.createConfig()));
      CHORUS_PLANT = register("chorus_plant", (ConfiguredFeature)Feature.CHORUS_PLANT.configure(FeatureConfig.DEFAULT).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeatRandomly(4));
      END_ISLAND = register("end_island", Feature.END_ISLAND.configure(FeatureConfig.DEFAULT));
      END_ISLAND_DECORATED = register("end_island_decorated", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)END_ISLAND.uniformRange(YOffset.fixed(55), YOffset.fixed(70))).spreadHorizontally()).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(1, 0.25F, 1))).applyChance(14));
      DELTA = register("delta", Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(ConfiguredFeatures.States.LAVA_BLOCK, ConfiguredFeatures.States.MAGMA_BLOCK, UniformIntProvider.create(3, 7), UniformIntProvider.create(0, 2))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(40))));
      SMALL_BASALT_COLUMNS = register("small_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(ConstantIntProvider.create(1), UniformIntProvider.create(1, 4))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
      LARGE_BASALT_COLUMNS = register("large_basalt_columns", Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(UniformIntProvider.create(2, 3), UniformIntProvider.create(5, 10))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(2))));
      BASALT_BLOBS = register("basalt_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new ReplaceBlobsFeatureConfig(ConfiguredFeatures.States.NETHERRACK, ConfiguredFeatures.States.BASALT, UniformIntProvider.create(3, 7))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(75));
      BLACKSTONE_BLOBS = register("blackstone_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.NETHERRACK_REPLACE_BLOBS.configure(new ReplaceBlobsFeatureConfig(ConfiguredFeatures.States.NETHERRACK, ConfiguredFeatures.States.BLACKSTONE, UniformIntProvider.create(3, 7))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(25));
      GLOWSTONE_EXTRA = register("glowstone_extra", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(BiasedToBottomIntProvider.create(0, 9)));
      GLOWSTONE = register("glowstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
      CRIMSON_FOREST_VEGETATION = register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(ConfiguredFeatures.Configs.CRIMSON_ROOTS_CONFIG).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(6))));
      WARPED_FOREST_VEGETATION = register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configure(ConfiguredFeatures.Configs.WARPED_ROOTS_CONFIG).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(5))));
      NETHER_SPROUTS = register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configure(ConfiguredFeatures.Configs.NETHER_SPROUTS_CONFIG).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(4))));
      TWISTING_VINES = register("twisting_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.TWISTING_VINES.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
      WEEPING_VINES = register("weeping_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.WEEPING_VINES.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
      BASALT_PILLAR = register("basalt_pillar", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BASALT_PILLAR.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(10));
      SEAGRASS_COLD = register("seagrass_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3F)).repeat(32)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_DEEP_COLD = register("seagrass_deep_cold", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8F)).repeat(40)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_NORMAL = register("seagrass_normal", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3F)).repeat(48)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_RIVER = register("seagrass_river", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.4F)).repeat(48)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_DEEP = register("seagrass_deep", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8F)).repeat(48)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_SWAMP = register("seagrass_swamp", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.6F)).repeat(64)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_WARM = register("seagrass_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.3F)).repeat(80)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEAGRASS_DEEP_WARM = register("seagrass_deep_warm", ((ConfiguredFeature)Feature.SEAGRASS.configure(new ProbabilityConfig(0.8F)).repeat(80)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      SEA_PICKLE = register("sea_pickle", (ConfiguredFeature)Feature.SEA_PICKLE.configure(new CountConfig(20)).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP).applyChance(16));
      ICE_SPIKE = register("ice_spike", (ConfiguredFeature)Feature.ICE_SPIKE.configure(FeatureConfig.DEFAULT).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(3));
      ICE_PATCH = register("ice_patch", (ConfiguredFeature)Feature.ICE_PATCH.configure(new DiskFeatureConfig(ConfiguredFeatures.States.PACKED_ICE, UniformIntProvider.create(2, 3), 1, ImmutableList.of(ConfiguredFeatures.States.DIRT, ConfiguredFeatures.States.GRASS_BLOCK, ConfiguredFeatures.States.PODZOL, ConfiguredFeatures.States.COARSE_DIRT, ConfiguredFeatures.States.MYCELIUM, ConfiguredFeatures.States.SNOW_BLOCK, ConfiguredFeatures.States.ICE))).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(2));
      FOREST_ROCK = register("forest_rock", (ConfiguredFeature)Feature.FOREST_ROCK.configure(new SingleStateFeatureConfig(ConfiguredFeatures.States.MOSSY_COBBLESTONE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeatRandomly(2));
      SEAGRASS_SIMPLE = register("seagrass_simple", ((ConfiguredFeature)Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.SEAGRASS), ImmutableList.of(ConfiguredFeatures.States.STONE), ImmutableList.of(ConfiguredFeatures.States.WATER_BLOCK), ImmutableList.of(ConfiguredFeatures.States.WATER_BLOCK))).applyChance(10)).decorate(Decorator.CARVING_MASK.configure(new CarvingMaskDecoratorConfig(GenerationStep.Carver.LIQUID))));
      ICEBERG_PACKED = register("iceberg_packed", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(ConfiguredFeatures.States.PACKED_ICE)).decorate(Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(16));
      ICEBERG_BLUE = register("iceberg_blue", (ConfiguredFeature)Feature.ICEBERG.configure(new SingleStateFeatureConfig(ConfiguredFeatures.States.BLUE_ICE)).decorate(Decorator.ICEBERG.configure(NopeDecoratorConfig.INSTANCE)).applyChance(200));
      KELP_COLD = register("kelp_cold", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate(ConfiguredFeatures.Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate(Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(120, 80.0D, 0.0D))));
      KELP_WARM = register("kelp_warm", ((ConfiguredFeature)Feature.KELP.configure(FeatureConfig.DEFAULT).decorate(ConfiguredFeatures.Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate(Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(80, 80.0D, 0.0D))));
      BLUE_ICE = register("blue_ice", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BLUE_ICE.configure(FeatureConfig.DEFAULT).uniformRange(YOffset.fixed(30), YOffset.fixed(61))).spreadHorizontally()).repeatRandomly(19));
      BAMBOO_LIGHT = register("bamboo_light", (ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.0F)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(16));
      BAMBOO = register("bamboo", ((ConfiguredFeature)Feature.BAMBOO.configure(new ProbabilityConfig(0.2F)).decorate(ConfiguredFeatures.Decorators.HEIGHTMAP_WORLD_SURFACE).spreadHorizontally()).decorate(Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(160, 80.0D, 0.3D))));
      VINES = register("vines", (ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).spreadHorizontally()).repeat(50));
      PROTOTYPE_VINES = register("prototype_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).uniformRange(YOffset.fixed(64), YOffset.fixed(100))).spreadHorizontally()).repeat(127));
      LAKE_WATER = register("lake_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LAKE.configure(new SingleStateFeatureConfig(ConfiguredFeatures.States.WATER_BLOCK)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).applyChance(4));
      LAKE_LAVA = register("lake_lava", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LAKE.configure(new SingleStateFeatureConfig(ConfiguredFeatures.States.LAVA_BLOCK)).decorate(Decorator.LAVA_LAKE.configure(new ChanceDecoratorConfig(80))).range(new RangeDecoratorConfig(BiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.getTop(), 8)))).spreadHorizontally()).applyChance(8));
      DISK_CLAY = register("disk_clay", Feature.DISK.configure(new DiskFeatureConfig(ConfiguredFeatures.States.CLAY, UniformIntProvider.create(2, 3), 1, ImmutableList.of(ConfiguredFeatures.States.DIRT, ConfiguredFeatures.States.CLAY))).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      DISK_GRAVEL = register("disk_gravel", Feature.DISK.configure(new DiskFeatureConfig(ConfiguredFeatures.States.GRAVEL, UniformIntProvider.create(2, 5), 2, ImmutableList.of(ConfiguredFeatures.States.DIRT, ConfiguredFeatures.States.GRASS_BLOCK))).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP));
      DISK_SAND = register("disk_sand", (ConfiguredFeature)Feature.DISK.configure(new DiskFeatureConfig(ConfiguredFeatures.States.SAND, UniformIntProvider.create(2, 6), 2, ImmutableList.of(ConfiguredFeatures.States.DIRT, ConfiguredFeatures.States.GRASS_BLOCK))).decorate(ConfiguredFeatures.Decorators.SQUARE_TOP_SOLID_HEIGHTMAP).repeat(3));
      FREEZE_TOP_LAYER = register("freeze_top_layer", Feature.FREEZE_TOP_LAYER.configure(FeatureConfig.DEFAULT));
      BONUS_CHEST = register("bonus_chest", Feature.BONUS_CHEST.configure(FeatureConfig.DEFAULT));
      VOID_START_PLATFORM = register("void_start_platform", Feature.VOID_START_PLATFORM.configure(FeatureConfig.DEFAULT));
      MONSTER_ROOM = register("monster_room", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.MONSTER_ROOM.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).spreadHorizontally()).repeat(8));
      DESERT_WELL = register("desert_well", (ConfiguredFeature)Feature.DESERT_WELL.configure(FeatureConfig.DEFAULT).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).applyChance(1000));
      FOSSIL_STRUCTURES = ImmutableList.of(new Identifier("fossil/spine_1"), new Identifier("fossil/spine_2"), new Identifier("fossil/spine_3"), new Identifier("fossil/spine_4"), new Identifier("fossil/skull_1"), new Identifier("fossil/skull_2"), new Identifier("fossil/skull_3"), new Identifier("fossil/skull_4"));
      FOSSIL_OVERLAY_STRUCTURES = ImmutableList.of(new Identifier("fossil/spine_1_coal"), new Identifier("fossil/spine_2_coal"), new Identifier("fossil/spine_3_coal"), new Identifier("fossil/spine_4_coal"), new Identifier("fossil/skull_1_coal"), new Identifier("fossil/skull_2_coal"), new Identifier("fossil/skull_3_coal"), new Identifier("fossil/skull_4_coal"));
      FOSSIL = register("fossil", (ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_COAL, 4)).applyChance(64));
      PROTOTYPE_FOSSIL_UPPER = register("prototype_fossil_upper", (ConfiguredFeature)((ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_COAL, 4)).uniformRange(YOffset.fixed(0), YOffset.getTop())).applyChance(64));
      PROTOTYPE_FOSSIL_LOWER = register("prototype_fossil_lower", (ConfiguredFeature)((ConfiguredFeature)Feature.FOSSIL.configure(new FossilFeatureConfig(FOSSIL_STRUCTURES, FOSSIL_OVERLAY_STRUCTURES, StructureProcessorLists.FOSSIL_ROT, StructureProcessorLists.FOSSIL_DIAMONDS, 4)).uniformRange(YOffset.getBottom(), YOffset.fixed(-8))).applyChance(64));
      SPRING_LAVA_DOUBLE = register("spring_lava_double", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(ConfiguredFeatures.Configs.LAVA_SPRING_CONFIG).range(new RangeDecoratorConfig(VeryBiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(40));
      SPRING_LAVA = register("spring_lava", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(ConfiguredFeatures.Configs.LAVA_SPRING_CONFIG).range(new RangeDecoratorConfig(VeryBiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(20));
      SPRING_DELTA = register("spring_delta", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(ConfiguredFeatures.States.LAVA_FLUID, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(16));
      SPRING_CLOSED = register("spring_closed", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(ConfiguredFeatures.Configs.ENCLOSED_NETHER_SPRING_CONFIG).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(16));
      SPRING_CLOSED_DOUBLE = register("spring_closed_double", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(ConfiguredFeatures.Configs.ENCLOSED_NETHER_SPRING_CONFIG).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(32));
      SPRING_OPEN = register("spring_open", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(ConfiguredFeatures.States.LAVA_FLUID, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_4)).spreadHorizontally()).repeat(8));
      SPRING_WATER = register("spring_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(ConfiguredFeatures.States.WATER_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).range(new RangeDecoratorConfig(BiasedToBottomHeightProvider.create(YOffset.getBottom(), YOffset.belowTop(8), 8)))).spreadHorizontally()).repeat(50));
      PROTOTYPE_SPRING_WATER = register("prototype_spring_water", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SPRING_FEATURE.configure(new SpringFeatureConfig(ConfiguredFeatures.States.WATER_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF))).uniformRange(YOffset.getBottom(), YOffset.getTop())).spreadHorizontally()).repeat(50));
      PILE_HAY = register("pile_hay", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new PillarBlockStateProvider(Blocks.HAY_BLOCK))));
      PILE_MELON = register("pile_melon", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.MELON))));
      PILE_SNOW = register("pile_snow", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.SNOW))));
      PILE_ICE = register("pile_ice", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider(method_35926().add(ConfiguredFeatures.States.BLUE_ICE, 1).add(ConfiguredFeatures.States.PACKED_ICE, 5)))));
      PILE_PUMPKIN = register("pile_pumpkin", Feature.BLOCK_PILE.configure(new BlockPileFeatureConfig(new WeightedBlockStateProvider(method_35926().add(ConfiguredFeatures.States.PUMPKIN, 19).add(ConfiguredFeatures.States.JACK_O_LANTERN, 1)))));
      PATCH_FIRE = register("patch_fire", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.FIRE), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(ConfiguredFeatures.States.NETHERRACK.getBlock())).cannotProject().build()).decorate(ConfiguredFeatures.Decorators.FIRE));
      PATCH_SOUL_FIRE = register("patch_soul_fire", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SOUL_FIRE), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(ConfiguredFeatures.States.SOUL_SOIL.getBlock())).cannotProject().build()).decorate(ConfiguredFeatures.Decorators.FIRE));
      PATCH_BROWN_MUSHROOM = register("patch_brown_mushroom", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).cannotProject().build()));
      PATCH_RED_MUSHROOM = register("patch_red_mushroom", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).cannotProject().build()));
      PATCH_CRIMSON_ROOTS = register("patch_crimson_roots", (ConfiguredFeature)Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.CRIMSON_ROOTS), new SimpleBlockPlacer())).tries(64).cannotProject().build()).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP));
      PATCH_SUNFLOWER = register("patch_sunflower", (ConfiguredFeature)Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SUNFLOWER), new DoublePlantPlacer())).tries(64).cannotProject().build()).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(10));
      PATCH_PUMPKIN = register("patch_pumpkin", (ConfiguredFeature)Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.PUMPKIN), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(ConfiguredFeatures.States.GRASS_BLOCK.getBlock())).cannotProject().build()).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(32));
      PATCH_TAIGA_GRASS = register("patch_taiga_grass", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.TAIGA_GRASS_CONFIG));
      PATCH_BERRY_BUSH = register("patch_berry_bush", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.SWEET_BERRY_BUSH_CONFIG));
      PATCH_GRASS_PLAIN = register("patch_grass_plain", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).decorate(Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8D, 5, 10))));
      PATCH_GRASS_FOREST = register("patch_grass_forest", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(2));
      PATCH_GRASS_BADLANDS = register("patch_grass_badlands", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      PATCH_GRASS_SAVANNA = register("patch_grass_savanna", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
      PATCH_GRASS_NORMAL = register("patch_grass_normal", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(5));
      PATCH_GRASS_TAIGA_2 = register("patch_grass_taiga_2", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.TAIGA_GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      PATCH_GRASS_TAIGA = register("patch_grass_taiga", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.TAIGA_GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(7));
      PATCH_GRASS_JUNGLE = register("patch_grass_jungle", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.LUSH_GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(25));
      PATCH_DEAD_BUSH_2 = register("patch_dead_bush_2", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.DEAD_BUSH_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(2));
      PATCH_DEAD_BUSH = register("patch_dead_bush", Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.DEAD_BUSH_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      PATCH_DEAD_BUSH_BADLANDS = register("patch_dead_bush_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.DEAD_BUSH_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
      PATCH_MELON = register("patch_melon", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.MELON), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(ConfiguredFeatures.States.GRASS_BLOCK.getBlock())).canReplace().cannotProject().build()).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      PATCH_BERRY_SPARSE = register("patch_berry_sparse", PATCH_BERRY_BUSH.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      PATCH_BERRY_DECORATED = register("patch_berry_decorated", (ConfiguredFeature)PATCH_BERRY_BUSH.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(12));
      PATCH_WATERLILLY = register("patch_waterlilly", (ConfiguredFeature)Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.LILY_PAD), SimpleBlockPlacer.INSTANCE)).tries(10).build()).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(4));
      PATCH_TALL_GRASS_2 = register("patch_tall_grass_2", ((ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.TALL_GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.HEIGHTMAP).spreadHorizontally()).decorate(Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8D, 0, 7))));
      PATCH_TALL_GRASS = register("patch_tall_grass", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.TALL_GRASS_CONFIG).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(7));
      PATCH_LARGE_FERN = register("patch_large_fern", (ConfiguredFeature)Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.LARGE_FERN), new DoublePlantPlacer())).tries(64).cannotProject().build()).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(7));
      PATCH_CACTUS = register("patch_cactus", Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.CACTUS), new ColumnPlacer(BiasedToBottomIntProvider.create(1, 3)))).tries(10).cannotProject().build()));
      PATCH_CACTUS_DESERT = register("patch_cactus_desert", (ConfiguredFeature)PATCH_CACTUS.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(10));
      PATCH_CACTUS_DECORATED = register("patch_cactus_decorated", (ConfiguredFeature)PATCH_CACTUS.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(5));
      PATCH_SUGAR_CANE_SWAMP = register("patch_sugar_cane_swamp", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.SUGAR_CANE_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(20));
      PATCH_SUGAR_CANE_DESERT = register("patch_sugar_cane_desert", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.SUGAR_CANE_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(60));
      PATCH_SUGAR_CANE_BADLANDS = register("patch_sugar_cane_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.SUGAR_CANE_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(13));
      PATCH_SUGAR_CANE = register("patch_sugar_cane", (ConfiguredFeature)Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.SUGAR_CANE_CONFIG).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).repeat(10));
      BROWN_MUSHROOM_NETHER = register("brown_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_BROWN_MUSHROOM.range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).applyChance(2));
      RED_MUSHROOM_NETHER = register("red_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_RED_MUSHROOM.range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP)).applyChance(2));
      BROWN_MUSHROOM_NORMAL = register("brown_mushroom_normal", (ConfiguredFeature)PATCH_BROWN_MUSHROOM.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(4));
      RED_MUSHROOM_NORMAL = register("red_mushroom_normal", (ConfiguredFeature)PATCH_RED_MUSHROOM.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE).applyChance(8));
      BROWN_MUSHROOM_TAIGA = register("brown_mushroom_taiga", ((ConfiguredFeature)PATCH_BROWN_MUSHROOM.applyChance(4)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP));
      RED_MUSHROOM_TAIGA = register("red_mushroom_taiga", ((ConfiguredFeature)PATCH_RED_MUSHROOM.applyChance(8)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_SPREAD_DOUBLE));
      BROWN_MUSHROOM_GIANT = register("brown_mushroom_giant", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(3));
      RED_MUSHROOM_GIANT = register("red_mushroom_giant", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(3));
      BROWN_MUSHROOM_SWAMP = register("brown_mushroom_swamp", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.repeat(8));
      RED_MUSHROOM_SWAMP = register("red_mushroom_swamp", (ConfiguredFeature)RED_MUSHROOM_TAIGA.repeat(8));
      IRON_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.IRON_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_IRON_ORE));
      REDSTONE_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.REDSTONE_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_REDSTONE_ORE));
      GOLD_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.GOLD_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_GOLD_ORE));
      DIAMOND_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.DIAMOND_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_DIAMOND_ORE));
      LAPIS_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.LAPIS_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_LAPIS_ORE));
      EMERALD_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.EMERALD_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_EMERALD_ORE));
      COPPER_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.COPPER_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_COPPER_ORE));
      COAL_ORE_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.COAL_ORE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.DEEPSLATE_COAL_ORE));
      INFESTED_TARGETS = ImmutableList.of(OreFeatureConfig.createTarget(OreFeatureConfig.Rules.STONE_ORE_REPLACEABLES, ConfiguredFeatures.States.INFESTED_STONE), OreFeatureConfig.createTarget(OreFeatureConfig.Rules.DEEPSLATE_ORE_REPLACEABLES, ConfiguredFeatures.States.INFESTED_DEEPSLATE));
      IRON_CONFIG = new OreFeatureConfig(IRON_ORE_TARGETS, 9);
      REDSTONE_CONFIG = new OreFeatureConfig(REDSTONE_ORE_TARGETS, 8);
      ORE_MAGMA = register("ore_magma", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.MAGMA_BLOCK, 33)).uniformRange(YOffset.fixed(27), YOffset.fixed(36))).spreadHorizontally()).repeat(4));
      ORE_SOUL_SAND = register("ore_soul_sand", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.SOUL_SAND, 12)).uniformRange(YOffset.getBottom(), YOffset.fixed(31))).spreadHorizontally()).repeat(12));
      ORE_GOLD_DELTAS = register("ore_gold_deltas", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.NETHER_GOLD_ORE, 10)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(20));
      ORE_QUARTZ_DELTAS = register("ore_quartz_deltas", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.NETHER_QUARTZ_ORE, 14)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(32));
      ORE_GOLD_NETHER = register("ore_gold_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.NETHER_GOLD_ORE, 10)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(10));
      ORE_QUARTZ_NETHER = register("ore_quartz_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.NETHER_QUARTZ_ORE, 14)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_10)).spreadHorizontally()).repeat(16));
      ORE_GRAVEL_NETHER = register("ore_gravel_nether", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.GRAVEL, 33)).uniformRange(YOffset.fixed(5), YOffset.fixed(41))).spreadHorizontally()).repeat(2));
      ORE_BLACKSTONE = register("ore_blackstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.NETHERRACK, ConfiguredFeatures.States.BLACKSTONE, 33)).uniformRange(YOffset.fixed(5), YOffset.fixed(31))).spreadHorizontally()).repeat(2));
      ORE_DIRT = register("ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.DIRT, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(10));
      PROTOTYPE_ORE_DIRT = register("prototype_ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.DIRT, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(15));
      ORE_GRAVEL = register("ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.GRAVEL, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(8));
      PROTOTYPE_ORE_GRAVEL = register("prototype_ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.GRAVEL, 33)).uniformRange(YOffset.fixed(0), YOffset.getTop())).spreadHorizontally()).repeat(12));
      ORE_GRANITE = register("ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.GRANITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
      PROTOTYPE_ORE_GRANITE = register("prototype_ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.GRANITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
      ORE_DIORITE = register("ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.DIORITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
      PROTOTYPE_ORE_DIORITE = register("prototype_ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.DIORITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
      ORE_ANDESITE = register("ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.ANDESITE, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(10));
      PROTOTYPE_ORE_ANDESITE = register("prototype_ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.ANDESITE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(79))).spreadHorizontally()).repeat(2));
      ORE_TUFF = register("ore_tuff", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.TUFF, 33)).uniformRange(YOffset.fixed(0), YOffset.fixed(16))).spreadHorizontally()).repeat(1));
      PROTOTYPE_ORE_TUFF = register("prototype_ore_tuff", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.TUFF, 64)).uniformRange(YOffset.getBottom(), YOffset.fixed(0))).spreadHorizontally()).repeat(2));
      ORE_DEEPSLATE = register("ore_deepslate", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.DEEPSLATE, 64)).uniformRange(YOffset.fixed(0), YOffset.fixed(16))).spreadHorizontally()).repeat(2));
      ORE_COAL = register("ore_coal", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17)).uniformRange(YOffset.getBottom(), YOffset.fixed(127))).spreadHorizontally()).repeat(20));
      PROTOTYPE_ORE_COAL_UPPER = register("prototype_ore_coal_upper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17)).uniformRange(YOffset.fixed(136), YOffset.getTop())).spreadHorizontally()).repeat(30));
      PROTOTYPE_ORE_COAL_LOWER = register("prototype_ore_coal_lower", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COAL_ORE_TARGETS, 17, 0.5F)).triangleRange(YOffset.fixed(0), YOffset.fixed(192))).spreadHorizontally()).repeat(20));
      ORE_IRON = register("ore_iron", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(IRON_ORE_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(20));
      PROTOTYPE_ORE_IRON_UPPER = register("prototype_ore_iron_upper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(IRON_CONFIG).triangleRange(YOffset.fixed(128), YOffset.fixed(384))).spreadHorizontally()).repeat(40));
      PROTOTYPE_ORE_IRON_MIDDLE = register("prototype_ore_iron_middle", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(IRON_CONFIG).triangleRange(YOffset.fixed(-24), YOffset.fixed(56))).spreadHorizontally()).repeat(5));
      PROTOTYPE_ORE_IRON_SMALL = register("prototype_ore_iron_small", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(IRON_ORE_TARGETS, 4)).uniformRange(YOffset.getBottom(), YOffset.fixed(64))).spreadHorizontally()).repeat(10));
      ORE_GOLD_EXTRA = register("ore_gold_extra", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9)).uniformRange(YOffset.fixed(32), YOffset.fixed(79))).spreadHorizontally()).repeat(20));
      ORE_GOLD = register("ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(31))).spreadHorizontally()).repeat(2));
      PROTOTYPE_ORE_GOLD = register("prototype_ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(GOLD_ORE_TARGETS, 9, 0.5F)).triangleRange(YOffset.fixed(-64), YOffset.fixed(32))).spreadHorizontally()).repeat(4));
      ORE_REDSTONE = register("ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).uniformRange(YOffset.getBottom(), YOffset.fixed(15))).spreadHorizontally()).repeat(8));
      PROTOTYPE_ORE_REDSTONE = register("prototype_ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).uniformRange(YOffset.getBottom(), YOffset.fixed(15))).spreadHorizontally()).repeat(4));
      PROTOTYPE_ORE_REDSTONE_LOWER = register("prototype_ore_redstone_lower", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(REDSTONE_CONFIG).triangleRange(YOffset.aboveBottom(-32), YOffset.aboveBottom(32))).spreadHorizontally()).repeat(8));
      ORE_DIAMOND = register("ore_diamond", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(16))).spreadHorizontally());
      PROTOTYPE_ORE_DIAMOND = register("prototype_ore_diamond", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 4, 0.5F)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80))).spreadHorizontally()).repeat(6));
      PROTOTYPE_ORE_DIAMOND_LARGE = register("prototype_ore_diamond_large", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(DIAMOND_ORE_TARGETS, 12, 0.7F)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80))).spreadHorizontally()).applyChance(9));
      ORE_LAPIS = register("ore_lapis", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7)).triangleRange(YOffset.fixed(0), YOffset.fixed(30))).spreadHorizontally());
      PROTOTYPE_ORE_LAPIS = register("prototype_ore_lapis", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7)).triangleRange(YOffset.fixed(-32), YOffset.fixed(32))).spreadHorizontally()).repeat(2));
      PROTOTYPE_ORE_LAPIS_BURIED = register("prototype_ore_lapis_buried", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(LAPIS_ORE_TARGETS, 7, 1.0F)).uniformRange(YOffset.getBottom(), YOffset.fixed(64))).spreadHorizontally()).repeat(4));
      ORE_INFESTED = register("ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(INFESTED_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(7));
      PROTOTYPE_ORE_INFESTED = register("prototype_ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(INFESTED_TARGETS, 9)).uniformRange(YOffset.getBottom(), YOffset.fixed(63))).spreadHorizontally()).repeat(14));
      ORE_EMERALD = register("ore_emerald", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.REPLACE_SINGLE_BLOCK.configure(new EmeraldOreFeatureConfig(EMERALD_ORE_TARGETS)).uniformRange(YOffset.fixed(4), YOffset.fixed(31))).spreadHorizontally()).repeat(UniformIntProvider.create(6, 24)));
      PROTOTYPE_ORE_EMERALD = register("prototype_ore_emerald", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(EMERALD_ORE_TARGETS, 3)).triangleRange(YOffset.fixed(32), YOffset.fixed(480))).spreadHorizontally()).repeat(50));
      ORE_DEBRIS_LARGE = register("ore_debris_large", (ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, ConfiguredFeatures.States.ANCIENT_DEBRIS, 3, 1.0F)).triangleRange(YOffset.fixed(8), YOffset.fixed(24))).spreadHorizontally());
      ORE_DEBRIS_SMALL = register("ore_debris_small", (ConfiguredFeature)((ConfiguredFeature)Feature.SCATTERED_ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_NETHER, ConfiguredFeatures.States.ANCIENT_DEBRIS, 2, 1.0F)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_TOP_OFFSET_8)).spreadHorizontally());
      ORE_COPPER = register("ore_copper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COPPER_ORE_TARGETS, 10)).triangleRange(YOffset.fixed(0), YOffset.fixed(96))).spreadHorizontally()).repeat(6));
      PROTOTYPE_ORE_COPPER = register("prototype_ore_copper", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(COPPER_ORE_TARGETS, 10)).uniformRange(YOffset.fixed(0), YOffset.fixed(63))).spreadHorizontally()).repeat(8));
      ORE_CLAY = register("ore_clay", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, ConfiguredFeatures.States.CLAY, 33)).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(15));
      DRIPSTONE_CLUSTER = register("dripstone_cluster", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.DRIPSTONE_CLUSTER.configure(new DripstoneClusterFeatureConfig(12, UniformIntProvider.create(3, 6), UniformIntProvider.create(2, 8), 1, 3, UniformIntProvider.create(2, 4), UniformFloatProvider.create(0.3F, 0.7F), ClampedNormalFloatProvider.create(0.1F, 0.3F, 0.1F, 0.9F), 0.1F, 3, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(10, 20)));
      LARGE_DRIPSTONE = register("large_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.LARGE_DRIPSTONE.configure(new LargeDripstoneFeatureConfig(30, UniformIntProvider.create(3, 19), UniformFloatProvider.create(0.4F, 2.0F), 0.33F, UniformFloatProvider.create(0.3F, 0.9F), UniformFloatProvider.create(0.4F, 1.0F), UniformFloatProvider.create(0.0F, 0.3F), 4, 0.6F)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(2, 10)));
      SMALL_DRIPSTONE = register("small_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SMALL_DRIPSTONE.configure(new SmallDripstoneFeatureConfig(5, 10, 2, 0.2F)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(40, 120)));
      RARE_DRIPSTONE_CLUSTER = register("rare_dripstone_cluster", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.DRIPSTONE_CLUSTER.configure(new DripstoneClusterFeatureConfig(12, UniformIntProvider.create(3, 3), UniformIntProvider.create(2, 6), 1, 3, UniformIntProvider.create(2, 2), UniformFloatProvider.create(0.3F, 0.4F), ClampedNormalFloatProvider.create(0.1F, 0.3F, 0.1F, 0.9F), 0.1F, 3, 8)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(10, 10))).applyChance(25));
      RARE_SMALL_DRIPSTONE = register("rare_small_dripstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SMALL_DRIPSTONE.configure(new SmallDripstoneFeatureConfig(5, 10, 2, 0.2F)).uniformRange(YOffset.getBottom(), YOffset.fixed(59))).spreadHorizontally()).repeat(UniformIntProvider.create(40, 80))).applyChance(30));
      PROTOTYPE_UNDERWATER_MAGMA = register("prototype_underwater_magma", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.UNDERWATER_MAGMA.configure(new UnderwaterMagmaFeatureConfig(5, 1, 0.5F)).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(39))).repeat(UniformIntProvider.create(4, 10)));
      GLOW_LICHEN = register("glow_lichen", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOW_LICHEN.configure(new GlowLichenFeatureConfig(20, false, true, true, 0.5F, ImmutableList.of(Blocks.STONE.getDefaultState(), Blocks.ANDESITE.getDefaultState(), Blocks.DIORITE.getDefaultState(), Blocks.GRANITE.getDefaultState(), Blocks.DRIPSTONE_BLOCK.getDefaultState(), Blocks.CALCITE.getDefaultState(), Blocks.TUFF.getDefaultState(), Blocks.DEEPSLATE.getDefaultState()))).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(54))).repeat(UniformIntProvider.create(20, 30)));
      PROTOTYPE_GLOW_LICHEN = register("prototype_glow_lichen", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOW_LICHEN.configure(new GlowLichenFeatureConfig(20, false, true, true, 0.5F, ImmutableList.of(Blocks.STONE.getDefaultState(), Blocks.ANDESITE.getDefaultState(), Blocks.DIORITE.getDefaultState(), Blocks.GRANITE.getDefaultState(), Blocks.DRIPSTONE_BLOCK.getDefaultState(), Blocks.CALCITE.getDefaultState(), Blocks.TUFF.getDefaultState(), Blocks.DEEPSLATE.getDefaultState()))).spreadHorizontally()).uniformRange(YOffset.getBottom(), YOffset.fixed(54))).repeat(UniformIntProvider.create(40, 60)));
      CRIMSON_FUNGI = register("crimson_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_NOT_PLANTED_CONFIG).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
      CRIMSON_FUNGI_PLANTED = register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.CRIMSON_FUNGUS_CONFIG));
      WARPED_FUNGI = register("warped_fungi", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_NOT_PLANTED_CONFIG).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(8))));
      WARPED_FUNGI_PLANTED = register("warped_fungi_planted", Feature.HUGE_FUNGUS.configure(HugeFungusFeatureConfig.WARPED_FUNGUS_CONFIG));
      HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.BROWN_MUSHROOM_BLOCK), new SimpleBlockStateProvider(ConfiguredFeatures.States.MUSHROOM_STEM), 3)));
      HUGE_RED_MUSHROOM = register("huge_red_mushroom", Feature.HUGE_RED_MUSHROOM.configure(new HugeMushroomFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.RED_MUSHROOM_BLOCK), new SimpleBlockStateProvider(ConfiguredFeatures.States.MUSHROOM_STEM), 2)));
      OAK = register("oak", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LOG), new StraightTrunkPlacer(4, 2, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      DARK_OAK = register("dark_oak", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.DARK_OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), new SimpleBlockStateProvider(ConfiguredFeatures.States.DARK_OAK_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.DARK_OAK_SAPLING), new DarkOakFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()))).ignoreVines().build()));
      BIRCH = register("birch", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_LOG), new StraightTrunkPlacer(5, 2, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      ACACIA = register("acacia", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), new SimpleBlockStateProvider(ConfiguredFeatures.States.ACACIA_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.ACACIA_SAPLING), new AcaciaFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build()));
      SPRUCE = register("spruce", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LOG), new StraightTrunkPlacer(5, 2, 1), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_SAPLING), new SpruceFoliagePlacer(UniformIntProvider.create(2, 3), UniformIntProvider.create(0, 2), UniformIntProvider.create(1, 2)), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build()));
      PINE = register("pine", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LOG), new StraightTrunkPlacer(6, 4, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_SAPLING), new PineFoliagePlacer(ConstantIntProvider.create(1), ConstantIntProvider.create(1), UniformIntProvider.create(3, 4)), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build()));
      JUNGLE_TREE = register("jungle_tree", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LOG), new StraightTrunkPlacer(4, 8, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).decorators(ImmutableList.of(new CocoaBeansTreeDecorator(0.2F), TrunkVineTreeDecorator.INSTANCE, LeavesVineTreeDecorator.INSTANCE)).ignoreVines().build()));
      FANCY_OAK = register("fancy_oak", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LOG), new LargeOakTrunkPlacer(3, 11, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_SAPLING), new LargeOakFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4)))).ignoreVines().build()));
      JUNGLE_TREE_NO_VINE = register("jungle_tree_no_vine", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LOG), new StraightTrunkPlacer(4, 8, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      MEGA_JUNGLE_TREE = register("mega_jungle_tree", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LOG), new MegaJungleTrunkPlacer(10, 2, 19), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_SAPLING), new JungleFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(TrunkVineTreeDecorator.INSTANCE, LeavesVineTreeDecorator.INSTANCE)).build()));
      MEGA_SPRUCE = register("mega_spruce", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LOG), new GiantTrunkPlacer(13, 2, 14), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_SAPLING), new MegaPineFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0), UniformIntProvider.create(13, 17)), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(ConfiguredFeatures.States.PODZOL)))).build()));
      MEGA_PINE = register("mega_pine", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LOG), new GiantTrunkPlacer(13, 2, 14), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.SPRUCE_SAPLING), new MegaPineFoliagePlacer(ConstantIntProvider.create(0), ConstantIntProvider.create(0), UniformIntProvider.create(3, 7)), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundTreeDecorator(new SimpleBlockStateProvider(ConfiguredFeatures.States.PODZOL)))).build()));
      SUPER_BIRCH_BEES_0002 = register("super_birch_bees_0002", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_LOG), new StraightTrunkPlacer(5, 2, 6), new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.BIRCH_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().decorators(ImmutableList.of(ConfiguredFeatures.Decorators.VERY_RARE_BEEHIVES_TREES)).build()));
      SWAMP_OAK = register("swamp_oak", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LOG), new StraightTrunkPlacer(5, 3, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_SAPLING), new BlobFoliagePlacer(ConstantIntProvider.create(3), ConstantIntProvider.create(0), 3), new TwoLayersFeatureSize(1, 0, 1))).decorators(ImmutableList.of(LeavesVineTreeDecorator.INSTANCE)).build()));
      JUNGLE_BUSH = register("jungle_bush", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.JUNGLE_LOG), new StraightTrunkPlacer(1, 0, 0), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LEAVES), new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_SAPLING), new BushFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(1), 2), new TwoLayersFeatureSize(0, 0, 0))).build()));
      AZALEA_TREE = register("azalea_tree", Feature.TREE.configure((new TreeFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.OAK_LOG), new BendingTrunkPlacer(4, 2, 0, 3, UniformIntProvider.create(1, 2)), new WeightedBlockStateProvider(method_35926().add(ConfiguredFeatures.States.AZALEA_LEAVES, 3).add(ConfiguredFeatures.States.FLOWERING_AZALEA_LEAVES, 1)), new SimpleBlockStateProvider(ConfiguredFeatures.States.AZALEA), new RandomSpreadFoliagePlacer(ConstantIntProvider.create(3), ConstantIntProvider.create(0), ConstantIntProvider.create(2), 50), new TwoLayersFeatureSize(1, 0, 1))).dirtProvider(new SimpleBlockStateProvider(Blocks.ROOTED_DIRT.getDefaultState())).forceDirt().build()));
      OAK_BEES_0002 = register("oak_bees_0002", Feature.TREE.configure(((TreeFeatureConfig)OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.VERY_RARE_BEEHIVES_TREES))));
      OAK_BEES_002 = register("oak_bees_002", Feature.TREE.configure(((TreeFeatureConfig)OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.REGULAR_BEEHIVES_TREES))));
      OAK_BEES_005 = register("oak_bees_005", Feature.TREE.configure(((TreeFeatureConfig)OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.MORE_BEEHIVES_TREES))));
      BIRCH_BEES_0002 = register("birch_bees_0002", Feature.TREE.configure(((TreeFeatureConfig)BIRCH.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.VERY_RARE_BEEHIVES_TREES))));
      BIRCH_BEES_002 = register("birch_bees_002", Feature.TREE.configure(((TreeFeatureConfig)BIRCH.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.REGULAR_BEEHIVES_TREES))));
      BIRCH_BEES_005 = register("birch_bees_005", Feature.TREE.configure(((TreeFeatureConfig)BIRCH.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.MORE_BEEHIVES_TREES))));
      FANCY_OAK_BEES_0002 = register("fancy_oak_bees_0002", Feature.TREE.configure(((TreeFeatureConfig)FANCY_OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.VERY_RARE_BEEHIVES_TREES))));
      FANCY_OAK_BEES_002 = register("fancy_oak_bees_002", Feature.TREE.configure(((TreeFeatureConfig)FANCY_OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.REGULAR_BEEHIVES_TREES))));
      FANCY_OAK_BEES_005 = register("fancy_oak_bees_005", Feature.TREE.configure(((TreeFeatureConfig)FANCY_OAK.getConfig()).setTreeDecorators(ImmutableList.of(ConfiguredFeatures.Decorators.MORE_BEEHIVES_TREES))));
      FLOWER_WARM = register("flower_warm", (ConfiguredFeature)Feature.FLOWER.configure(ConfiguredFeatures.Configs.DEFAULT_FLOWER_CONFIG).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(4));
      FLOWER_DEFAULT = register("flower_default", (ConfiguredFeature)Feature.FLOWER.configure(ConfiguredFeatures.Configs.DEFAULT_FLOWER_CONFIG).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(2));
      FLOWER_FOREST = register("flower_forest", (ConfiguredFeature)Feature.FLOWER.configure((new RandomPatchFeatureConfig.Builder(ForestFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build()).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(100));
      FLOWER_SWAMP = register("flower_swamp", Feature.FLOWER.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE)).tries(64).build()).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP));
      FLOWER_PLAIN = register("flower_plain", Feature.FLOWER.configure((new RandomPatchFeatureConfig.Builder(PlainsFlowerBlockStateProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build()));
      FLOWER_PLAIN_DECORATED = register("flower_plain_decorated", ((ConfiguredFeature)FLOWER_PLAIN.decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.HEIGHTMAP).spreadHorizontally()).decorate(Decorator.COUNT_NOISE.configure(new CountNoiseDecoratorConfig(-0.8D, 15, 4))));
      FOREST_FLOWER_VEGETATION_CONFIGS = ImmutableList.of(() -> {
         return Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.LILAC), new DoublePlantPlacer())).tries(64).cannotProject().build());
      }, () -> {
         return Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.ROSE_BUSH), new DoublePlantPlacer())).tries(64).cannotProject().build());
      }, () -> {
         return Feature.RANDOM_PATCH.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.PEONY), new DoublePlantPlacer())).tries(64).cannotProject().build());
      }, () -> {
         return Feature.NO_BONEMEAL_FLOWER.configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE)).tries(64).build());
      });
      FOREST_FLOWER_VEGETATION_COMMON = register("forest_flower_vegetation_common", (ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(ClampedIntProvider.create(UniformIntProvider.create(-1, 3), 0, 3))).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(5));
      FOREST_FLOWER_VEGETATION = register("forest_flower_vegetation", (ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(FOREST_FLOWER_VEGETATION_CONFIGS)).repeat(ClampedIntProvider.create(UniformIntProvider.create(-3, 1), 0, 1))).decorate(ConfiguredFeatures.Decorators.SPREAD_32_ABOVE).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP).repeat(5));
      DARK_FOREST_VEGETATION_BROWN = register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(HUGE_BROWN_MUSHROOM.withChance(0.025F), HUGE_RED_MUSHROOM.withChance(0.05F), DARK_OAK.withChance(0.6666667F), BIRCH.withChance(0.2F), FANCY_OAK.withChance(0.1F)), OAK)).decorate(ConfiguredFeatures.Decorators.DARK_OAK_TREE_HEIGHTMAP));
      DARK_FOREST_VEGETATION_RED = register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(HUGE_RED_MUSHROOM.withChance(0.025F), HUGE_BROWN_MUSHROOM.withChance(0.05F), DARK_OAK.withChance(0.6666667F), BIRCH.withChance(0.2F), FANCY_OAK.withChance(0.1F)), OAK)).decorate(ConfiguredFeatures.Decorators.DARK_OAK_TREE_HEIGHTMAP));
      WARM_OCEAN_VEGETATION = register("warm_ocean_vegetation", ((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(ImmutableList.of(() -> {
         return Feature.CORAL_TREE.configure(FeatureConfig.DEFAULT);
      }, () -> {
         return Feature.CORAL_CLAW.configure(FeatureConfig.DEFAULT);
      }, () -> {
         return Feature.CORAL_MUSHROOM.configure(FeatureConfig.DEFAULT);
      }))).decorate(ConfiguredFeatures.Decorators.TOP_SOLID_HEIGHTMAP).spreadHorizontally()).decorate(Decorator.COUNT_NOISE_BIASED.configure(new CountNoiseBiasedDecoratorConfig(20, 400.0D, 0.0D))));
      FOREST_FLOWER_TREES = register("forest_flower_trees", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(BIRCH_BEES_002.withChance(0.2F), FANCY_OAK_BEES_002.withChance(0.1F)), OAK_BEES_002)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(6, 0.1F, 1))));
      TAIGA_VEGETATION = register("taiga_vegetation", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(PINE.withChance(0.33333334F)), SPRUCE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      TREES_BADLANDS = register("trees_badlands", OAK.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(5, 0.1F, 1))));
      TREES_SNOWY = register("trees_snowy", SPRUCE.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1F, 1))));
      TREES_SWAMP = register("trees_swamp", ((ConfiguredFeature)SWAMP_OAK.decorate(ConfiguredFeatures.Decorators.HEIGHTMAP_OCEAN_FLOOR).decorate(Decorator.WATER_DEPTH_THRESHOLD.configure(new WaterDepthThresholdDecoratorConfig(1))).spreadHorizontally()).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1F, 1))));
      TREES_SHATTERED_SAVANNA = register("trees_shattered_savanna", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8F)), OAK)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1F, 1))));
      TREES_SAVANNA = register("trees_savanna", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(ACACIA.withChance(0.8F)), OAK)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(1, 0.1F, 1))));
      BIRCH_TALL = register("birch_tall", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SUPER_BIRCH_BEES_0002.withChance(0.5F)), BIRCH_BEES_0002)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      TREES_BIRCH = register("trees_birch", BIRCH_BEES_0002.decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      TREES_MOUNTAIN_EDGE = register("trees_mountain_edge", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666F), FANCY_OAK.withChance(0.1F)), OAK)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(3, 0.1F, 1))));
      TREES_MOUNTAIN = register("trees_mountain", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(SPRUCE.withChance(0.666F), FANCY_OAK.withChance(0.1F)), OAK)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1F, 1))));
      TREES_WATER = register("trees_water", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F)), OAK)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.1F, 1))));
      BIRCH_OTHER = register("birch_other", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(BIRCH_BEES_0002.withChance(0.2F), FANCY_OAK_BEES_0002.withChance(0.1F)), OAK_BEES_0002)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      PLAIN_VEGETATION = register("plain_vegetation", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK_BEES_005.withChance(0.33333334F)), OAK_BEES_005)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(0, 0.05F, 1))));
      TREES_JUNGLE_EDGE = register("trees_jungle_edge", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F), JUNGLE_BUSH.withChance(0.5F)), JUNGLE_TREE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(2, 0.1F, 1))));
      TREES_GIANT_SPRUCE = register("trees_giant_spruce", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.33333334F), PINE.withChance(0.33333334F)), SPRUCE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      TREES_GIANT = register("trees_giant", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(MEGA_SPRUCE.withChance(0.025641026F), MEGA_PINE.withChance(0.30769232F), PINE.withChance(0.33333334F)), SPRUCE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(10, 0.1F, 1))));
      TREES_JUNGLE = register("trees_jungle", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.1F), JUNGLE_BUSH.withChance(0.5F), MEGA_JUNGLE_TREE.withChance(0.33333334F)), JUNGLE_TREE)).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(50, 0.1F, 1))));
      BAMBOO_VEGETATION = register("bamboo_vegetation", Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(FANCY_OAK.withChance(0.05F), JUNGLE_BUSH.withChance(0.15F), MEGA_JUNGLE_TREE.withChance(0.7F)), Feature.RANDOM_PATCH.configure(ConfiguredFeatures.Configs.LUSH_GRASS_CONFIG))).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER).decorate(Decorator.COUNT_EXTRA.configure(new CountExtraDecoratorConfig(30, 0.1F, 1))));
      MUSHROOM_FIELD_VEGETATION = register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> {
         return HUGE_RED_MUSHROOM;
      }, () -> {
         return HUGE_BROWN_MUSHROOM;
      })).decorate(ConfiguredFeatures.Decorators.SQUARE_HEIGHTMAP));
      ROOTED_AZALEA_TREES = register("rooted_azalea_trees", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ROOT_SYSTEM.configure(new RootSystemFeatureConfig(() -> {
         return AZALEA_TREE;
      }, 3, 3, BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.ROOTED_DIRT.getDefaultState()), 20, 100, 3, 2, new SimpleBlockStateProvider(Blocks.HANGING_ROOTS.getDefaultState()), 20, 2)).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).applyChance(2));
      RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER = new WeightedBlockStateProvider(method_35926().add(Blocks.CAVE_VINES_PLANT.getDefaultState(), 4).add((BlockState)Blocks.CAVE_VINES_PLANT.getDefaultState().with(CaveVines.BERRIES, true), 1));
      RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER = new RandomizedIntBlockStateProvider(new WeightedBlockStateProvider(method_35926().add(Blocks.CAVE_VINES.getDefaultState(), 4).add((BlockState)Blocks.CAVE_VINES.getDefaultState().with(CaveVines.BERRIES, true), 1)), CaveVinesHeadBlock.AGE, UniformIntProvider.create(17, 25));
      CAVE_VINE = register("cave_vine", Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 20), 2).add(UniformIntProvider.create(1, 3), 3).add(UniformIntProvider.create(1, 7), 10).build(), Direction.DOWN, RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER, RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER, false)));
      CAVE_VINE_IN_MOSS = register("cave_vine_in_moss", Feature.GROWING_PLANT.configure(new GrowingPlantFeatureConfig(DataPool.builder().add(UniformIntProvider.create(1, 4), 5).add(UniformIntProvider.create(2, 8), 1).build(), Direction.DOWN, RANDOM_BERRIES_CAVE_VINES_BODY_PROVIDER, RANDOM_AGE_CAVE_VINES_HEAD_PROVIDER, false)));
      CAVE_VINES = register("cave_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)CAVE_VINE.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(60));
      MOSS_VEGETATION = register("moss_vegetation", Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(method_35926().add(Blocks.FLOWERING_AZALEA.getDefaultState(), 4).add(Blocks.AZALEA.getDefaultState(), 7).add(Blocks.MOSS_CARPET.getDefaultState(), 25).add(Blocks.GRASS.getDefaultState(), 50).add(Blocks.TALL_GRASS.getDefaultState(), 10)))));
      MOSS_PATCH = register("moss_patch", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> {
         return MOSS_VEGETATION;
      }, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.0F, 5, 0.8F, UniformIntProvider.create(4, 7), 0.3F)));
      MOSS_PATCH_BONEMEAL = register("moss_patch_bonemeal", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> {
         return MOSS_VEGETATION;
      }, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.0F, 5, 0.6F, UniformIntProvider.create(1, 2), 0.75F)));
      LUSH_CAVES_VEGETATION = register("lush_caves_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)MOSS_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(40));
      DRIPLEAF = register("dripleaf", Feature.SIMPLE_RANDOM_SELECTOR.configure(new SimpleRandomFeatureConfig(ImmutableList.of(ConfiguredFeatures::createSmallDripleafFeature, () -> {
         return createBigDripleafFeature(Direction.EAST);
      }, () -> {
         return createBigDripleafFeature(Direction.WEST);
      }, () -> {
         return createBigDripleafFeature(Direction.SOUTH);
      }, () -> {
         return createBigDripleafFeature(Direction.NORTH);
      }))));
      CLAY_WITH_DRIPLEAVES = register("clay_with_dripleaves", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.CLAY.getDefaultState()), () -> {
         return DRIPLEAF;
      }, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.05F, UniformIntProvider.create(4, 7), 0.7F)));
      CLAY_POOL_WITH_DRIPLEAVES = register("clay_pool_with_dripleaves", Feature.WATERLOGGED_VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.CLAY.getDefaultState()), () -> {
         return DRIPLEAF;
      }, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 5, 0.1F, UniformIntProvider.create(4, 7), 0.7F)));
      LUSH_CAVES_CLAY = register("lush_caves_clay", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> {
         return CLAY_WITH_DRIPLEAVES;
      }, () -> {
         return CLAY_POOL_WITH_DRIPLEAVES;
      })).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(20));
      MOSS_PATCH_CEILING = register("moss_patch_ceiling", Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), new SimpleBlockStateProvider(Blocks.MOSS_BLOCK.getDefaultState()), () -> {
         return CAVE_VINE_IN_MOSS;
      }, VerticalSurfaceType.CEILING, UniformIntProvider.create(1, 2), 0.0F, 5, 0.08F, UniformIntProvider.create(4, 7), 0.3F)));
      LUSH_CAVES_CEILING_VEGETATION = register("lush_caves_ceiling_vegetation", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)MOSS_PATCH_CEILING.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(40));
      SPORE_BLOSSOM = register("spore_blossom", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.SPORE_BLOSSOM))).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12))).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(8));
      CLASSIC_VINES_CAVE_FEATURE = register("classic_vines_cave_feature", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configure(FeatureConfig.DEFAULT).range(ConfiguredFeatures.Decorators.BOTTOM_TO_60)).spreadHorizontally()).repeat(127));
      AMETHYST_GEODE = register("amethyst_geode", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GEODE.configure(new GeodeFeatureConfig(new GeodeLayerConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.AIR), new SimpleBlockStateProvider(ConfiguredFeatures.States.AMETHYST_BLOCK), new SimpleBlockStateProvider(ConfiguredFeatures.States.BUDDING_AMETHYST), new SimpleBlockStateProvider(ConfiguredFeatures.States.CALCITE), new SimpleBlockStateProvider(ConfiguredFeatures.States.SMOOTH_BASALT), ImmutableList.of(Blocks.SMALL_AMETHYST_BUD.getDefaultState(), Blocks.MEDIUM_AMETHYST_BUD.getDefaultState(), Blocks.LARGE_AMETHYST_BUD.getDefaultState(), Blocks.AMETHYST_CLUSTER.getDefaultState()), BlockTags.FEATURES_CANNOT_REPLACE.getId(), BlockTags.GEODE_INVALID_BLOCKS.getId()), new GeodeLayerThicknessConfig(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackConfig(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformIntProvider.create(4, 6), UniformIntProvider.create(3, 4), UniformIntProvider.create(1, 2), -16, 16, 0.05D, 1)).uniformRange(YOffset.aboveBottom(6), YOffset.fixed(46))).spreadHorizontally()).applyChance(53));
   }

   public static final class States {
      protected static final BlockState GRASS;
      protected static final BlockState FERN;
      protected static final BlockState PODZOL;
      protected static final BlockState COARSE_DIRT;
      protected static final BlockState MYCELIUM;
      protected static final BlockState SNOW_BLOCK;
      protected static final BlockState ICE;
      protected static final BlockState OAK_LOG;
      protected static final BlockState OAK_LEAVES;
      protected static final BlockState OAK_SAPLING;
      protected static final BlockState JUNGLE_LOG;
      protected static final BlockState JUNGLE_LEAVES;
      protected static final BlockState JUNGLE_SAPLING;
      protected static final BlockState SPRUCE_LOG;
      protected static final BlockState SPRUCE_LEAVES;
      protected static final BlockState SPRUCE_SAPLING;
      protected static final BlockState ACACIA_LOG;
      protected static final BlockState ACACIA_LEAVES;
      protected static final BlockState ACACIA_SAPLING;
      protected static final BlockState BIRCH_LOG;
      protected static final BlockState BIRCH_LEAVES;
      protected static final BlockState BIRCH_SAPLING;
      protected static final BlockState DARK_OAK_LOG;
      protected static final BlockState DARK_OAK_LEAVES;
      protected static final BlockState DARK_OAK_SAPLING;
      protected static final BlockState GRASS_BLOCK;
      protected static final BlockState LARGE_FERN;
      protected static final BlockState TALL_GRASS;
      protected static final BlockState LILAC;
      protected static final BlockState ROSE_BUSH;
      protected static final BlockState PEONY;
      protected static final BlockState BROWN_MUSHROOM;
      protected static final BlockState RED_MUSHROOM;
      protected static final BlockState PACKED_ICE;
      protected static final BlockState BLUE_ICE;
      protected static final BlockState LILY_OF_THE_VALLEY;
      protected static final BlockState BLUE_ORCHID;
      protected static final BlockState POPPY;
      protected static final BlockState DANDELION;
      protected static final BlockState DEAD_BUSH;
      protected static final BlockState MELON;
      protected static final BlockState PUMPKIN;
      protected static final BlockState SWEET_BERRY_BUSH;
      protected static final BlockState FIRE;
      protected static final BlockState SOUL_FIRE;
      protected static final BlockState NETHERRACK;
      protected static final BlockState SOUL_SOIL;
      protected static final BlockState CRIMSON_ROOTS;
      protected static final BlockState LILY_PAD;
      protected static final BlockState SNOW;
      protected static final BlockState JACK_O_LANTERN;
      protected static final BlockState SUNFLOWER;
      protected static final BlockState CACTUS;
      protected static final BlockState SUGAR_CANE;
      protected static final BlockState RED_MUSHROOM_BLOCK;
      protected static final BlockState BROWN_MUSHROOM_BLOCK;
      protected static final BlockState MUSHROOM_STEM;
      protected static final FluidState WATER_FLUID;
      protected static final FluidState LAVA_FLUID;
      protected static final BlockState WATER_BLOCK;
      protected static final BlockState LAVA_BLOCK;
      protected static final BlockState DIRT;
      protected static final BlockState GRAVEL;
      protected static final BlockState GRANITE;
      protected static final BlockState DIORITE;
      protected static final BlockState ANDESITE;
      protected static final BlockState COAL_ORE;
      protected static final BlockState DEEPSLATE_COAL_ORE;
      protected static final BlockState COPPER_ORE;
      protected static final BlockState DEEPSLATE_COPPER_ORE;
      protected static final BlockState IRON_ORE;
      protected static final BlockState DEEPSLATE_IRON_ORE;
      protected static final BlockState GOLD_ORE;
      protected static final BlockState DEEPSLATE_GOLD_ORE;
      protected static final BlockState REDSTONE_ORE;
      protected static final BlockState DEEPSLATE_REDSTONE_ORE;
      protected static final BlockState DIAMOND_ORE;
      protected static final BlockState DEEPSLATE_DIAMOND_ORE;
      protected static final BlockState LAPIS_ORE;
      protected static final BlockState DEEPSLATE_LAPIS_ORE;
      protected static final BlockState STONE;
      protected static final BlockState EMERALD_ORE;
      protected static final BlockState DEEPSLATE_EMERALD_ORE;
      protected static final BlockState INFESTED_STONE;
      protected static final BlockState INFESTED_DEEPSLATE;
      protected static final BlockState SAND;
      protected static final BlockState CLAY;
      protected static final BlockState MOSSY_COBBLESTONE;
      protected static final BlockState SEAGRASS;
      protected static final BlockState MAGMA_BLOCK;
      protected static final BlockState SOUL_SAND;
      protected static final BlockState NETHER_GOLD_ORE;
      protected static final BlockState NETHER_QUARTZ_ORE;
      protected static final BlockState BLACKSTONE;
      protected static final BlockState ANCIENT_DEBRIS;
      protected static final BlockState BASALT;
      protected static final BlockState CRIMSON_FUNGUS;
      protected static final BlockState WARPED_FUNGUS;
      protected static final BlockState WARPED_ROOTS;
      protected static final BlockState NETHER_SPROUTS;
      protected static final BlockState AIR;
      protected static final BlockState AMETHYST_BLOCK;
      protected static final BlockState BUDDING_AMETHYST;
      protected static final BlockState CALCITE;
      protected static final BlockState SMOOTH_BASALT;
      protected static final BlockState TUFF;
      protected static final BlockState SPORE_BLOSSOM;
      protected static final BlockState SMALL_DRIPLEAF_EAST;
      protected static final BlockState SMALL_DRIPLEAF_WEST;
      protected static final BlockState SMALL_DRIPLEAF_NORTH;
      protected static final BlockState SMALL_DRIPLEAF_SOUTH;
      protected static final BlockState BIG_DRIPLEAF_EAST;
      protected static final BlockState BIG_DRIPLEAF_WEST;
      protected static final BlockState BIG_DRIPLEAF_NORTH;
      protected static final BlockState BIG_DIRPLEAF_SOUTH;
      protected static final BlockState DEEPSLATE;
      protected static final BlockState AZALEA_LEAVES;
      protected static final BlockState FLOWERING_AZALEA_LEAVES;
      protected static final BlockState AZALEA;

      static {
         GRASS = Blocks.GRASS.getDefaultState();
         FERN = Blocks.FERN.getDefaultState();
         PODZOL = Blocks.PODZOL.getDefaultState();
         COARSE_DIRT = Blocks.COARSE_DIRT.getDefaultState();
         MYCELIUM = Blocks.MYCELIUM.getDefaultState();
         SNOW_BLOCK = Blocks.SNOW_BLOCK.getDefaultState();
         ICE = Blocks.ICE.getDefaultState();
         OAK_LOG = Blocks.OAK_LOG.getDefaultState();
         OAK_LEAVES = Blocks.OAK_LEAVES.getDefaultState();
         OAK_SAPLING = Blocks.OAK_SAPLING.getDefaultState();
         JUNGLE_LOG = Blocks.JUNGLE_LOG.getDefaultState();
         JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.getDefaultState();
         JUNGLE_SAPLING = Blocks.JUNGLE_SAPLING.getDefaultState();
         SPRUCE_LOG = Blocks.SPRUCE_LOG.getDefaultState();
         SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.getDefaultState();
         SPRUCE_SAPLING = Blocks.SPRUCE_SAPLING.getDefaultState();
         ACACIA_LOG = Blocks.ACACIA_LOG.getDefaultState();
         ACACIA_LEAVES = Blocks.ACACIA_LEAVES.getDefaultState();
         ACACIA_SAPLING = Blocks.ACACIA_SAPLING.getDefaultState();
         BIRCH_LOG = Blocks.BIRCH_LOG.getDefaultState();
         BIRCH_LEAVES = Blocks.BIRCH_LEAVES.getDefaultState();
         BIRCH_SAPLING = Blocks.BIRCH_SAPLING.getDefaultState();
         DARK_OAK_LOG = Blocks.DARK_OAK_LOG.getDefaultState();
         DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.getDefaultState();
         DARK_OAK_SAPLING = Blocks.DARK_OAK_SAPLING.getDefaultState();
         GRASS_BLOCK = Blocks.GRASS_BLOCK.getDefaultState();
         LARGE_FERN = Blocks.LARGE_FERN.getDefaultState();
         TALL_GRASS = Blocks.TALL_GRASS.getDefaultState();
         LILAC = Blocks.LILAC.getDefaultState();
         ROSE_BUSH = Blocks.ROSE_BUSH.getDefaultState();
         PEONY = Blocks.PEONY.getDefaultState();
         BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.getDefaultState();
         RED_MUSHROOM = Blocks.RED_MUSHROOM.getDefaultState();
         PACKED_ICE = Blocks.PACKED_ICE.getDefaultState();
         BLUE_ICE = Blocks.BLUE_ICE.getDefaultState();
         LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.getDefaultState();
         BLUE_ORCHID = Blocks.BLUE_ORCHID.getDefaultState();
         POPPY = Blocks.POPPY.getDefaultState();
         DANDELION = Blocks.DANDELION.getDefaultState();
         DEAD_BUSH = Blocks.DEAD_BUSH.getDefaultState();
         MELON = Blocks.MELON.getDefaultState();
         PUMPKIN = Blocks.PUMPKIN.getDefaultState();
         SWEET_BERRY_BUSH = (BlockState)Blocks.SWEET_BERRY_BUSH.getDefaultState().with(SweetBerryBushBlock.AGE, 3);
         FIRE = Blocks.FIRE.getDefaultState();
         SOUL_FIRE = Blocks.SOUL_FIRE.getDefaultState();
         NETHERRACK = Blocks.NETHERRACK.getDefaultState();
         SOUL_SOIL = Blocks.SOUL_SOIL.getDefaultState();
         CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.getDefaultState();
         LILY_PAD = Blocks.LILY_PAD.getDefaultState();
         SNOW = Blocks.SNOW.getDefaultState();
         JACK_O_LANTERN = Blocks.JACK_O_LANTERN.getDefaultState();
         SUNFLOWER = Blocks.SUNFLOWER.getDefaultState();
         CACTUS = Blocks.CACTUS.getDefaultState();
         SUGAR_CANE = Blocks.SUGAR_CANE.getDefaultState();
         RED_MUSHROOM_BLOCK = (BlockState)Blocks.RED_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.DOWN, false);
         BROWN_MUSHROOM_BLOCK = (BlockState)((BlockState)Blocks.BROWN_MUSHROOM_BLOCK.getDefaultState().with(MushroomBlock.UP, true)).with(MushroomBlock.DOWN, false);
         MUSHROOM_STEM = (BlockState)((BlockState)Blocks.MUSHROOM_STEM.getDefaultState().with(MushroomBlock.UP, false)).with(MushroomBlock.DOWN, false);
         WATER_FLUID = Fluids.WATER.getDefaultState();
         LAVA_FLUID = Fluids.LAVA.getDefaultState();
         WATER_BLOCK = Blocks.WATER.getDefaultState();
         LAVA_BLOCK = Blocks.LAVA.getDefaultState();
         DIRT = Blocks.DIRT.getDefaultState();
         GRAVEL = Blocks.GRAVEL.getDefaultState();
         GRANITE = Blocks.GRANITE.getDefaultState();
         DIORITE = Blocks.DIORITE.getDefaultState();
         ANDESITE = Blocks.ANDESITE.getDefaultState();
         COAL_ORE = Blocks.COAL_ORE.getDefaultState();
         DEEPSLATE_COAL_ORE = Blocks.DEEPSLATE_COAL_ORE.getDefaultState();
         COPPER_ORE = Blocks.COPPER_ORE.getDefaultState();
         DEEPSLATE_COPPER_ORE = Blocks.DEEPSLATE_COPPER_ORE.getDefaultState();
         IRON_ORE = Blocks.IRON_ORE.getDefaultState();
         DEEPSLATE_IRON_ORE = Blocks.DEEPSLATE_IRON_ORE.getDefaultState();
         GOLD_ORE = Blocks.GOLD_ORE.getDefaultState();
         DEEPSLATE_GOLD_ORE = Blocks.DEEPSLATE_GOLD_ORE.getDefaultState();
         REDSTONE_ORE = Blocks.REDSTONE_ORE.getDefaultState();
         DEEPSLATE_REDSTONE_ORE = Blocks.DEEPSLATE_REDSTONE_ORE.getDefaultState();
         DIAMOND_ORE = Blocks.DIAMOND_ORE.getDefaultState();
         DEEPSLATE_DIAMOND_ORE = Blocks.DEEPSLATE_DIAMOND_ORE.getDefaultState();
         LAPIS_ORE = Blocks.LAPIS_ORE.getDefaultState();
         DEEPSLATE_LAPIS_ORE = Blocks.DEEPSLATE_LAPIS_ORE.getDefaultState();
         STONE = Blocks.STONE.getDefaultState();
         EMERALD_ORE = Blocks.EMERALD_ORE.getDefaultState();
         DEEPSLATE_EMERALD_ORE = Blocks.DEEPSLATE_EMERALD_ORE.getDefaultState();
         INFESTED_STONE = Blocks.INFESTED_STONE.getDefaultState();
         INFESTED_DEEPSLATE = Blocks.INFESTED_DEEPSLATE.getDefaultState();
         SAND = Blocks.SAND.getDefaultState();
         CLAY = Blocks.CLAY.getDefaultState();
         MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.getDefaultState();
         SEAGRASS = Blocks.SEAGRASS.getDefaultState();
         MAGMA_BLOCK = Blocks.MAGMA_BLOCK.getDefaultState();
         SOUL_SAND = Blocks.SOUL_SAND.getDefaultState();
         NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.getDefaultState();
         NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.getDefaultState();
         BLACKSTONE = Blocks.BLACKSTONE.getDefaultState();
         ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.getDefaultState();
         BASALT = Blocks.BASALT.getDefaultState();
         CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.getDefaultState();
         WARPED_FUNGUS = Blocks.WARPED_FUNGUS.getDefaultState();
         WARPED_ROOTS = Blocks.WARPED_ROOTS.getDefaultState();
         NETHER_SPROUTS = Blocks.NETHER_SPROUTS.getDefaultState();
         AIR = Blocks.AIR.getDefaultState();
         AMETHYST_BLOCK = Blocks.AMETHYST_BLOCK.getDefaultState();
         BUDDING_AMETHYST = Blocks.BUDDING_AMETHYST.getDefaultState();
         CALCITE = Blocks.CALCITE.getDefaultState();
         SMOOTH_BASALT = Blocks.SMOOTH_BASALT.getDefaultState();
         TUFF = Blocks.TUFF.getDefaultState();
         SPORE_BLOSSOM = Blocks.SPORE_BLOSSOM.getDefaultState();
         SMALL_DRIPLEAF_EAST = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.EAST);
         SMALL_DRIPLEAF_WEST = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.WEST);
         SMALL_DRIPLEAF_NORTH = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.NORTH);
         SMALL_DRIPLEAF_SOUTH = (BlockState)Blocks.SMALL_DRIPLEAF.getDefaultState().with(SmallDripleafBlock.FACING, Direction.SOUTH);
         BIG_DRIPLEAF_EAST = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.EAST);
         BIG_DRIPLEAF_WEST = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.WEST);
         BIG_DRIPLEAF_NORTH = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.NORTH);
         BIG_DIRPLEAF_SOUTH = (BlockState)Blocks.BIG_DRIPLEAF.getDefaultState().with(BigDripleafBlock.FACING, Direction.SOUTH);
         DEEPSLATE = Blocks.DEEPSLATE.getDefaultState();
         AZALEA_LEAVES = Blocks.AZALEA_LEAVES.getDefaultState();
         FLOWERING_AZALEA_LEAVES = Blocks.FLOWERING_AZALEA_LEAVES.getDefaultState();
         AZALEA = Blocks.AZALEA.getDefaultState();
      }
   }

   protected static final class Decorators {
      public static final BeehiveTreeDecorator VERY_RARE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.002F);
      public static final BeehiveTreeDecorator REGULAR_BEEHIVES_TREES = new BeehiveTreeDecorator(0.02F);
      public static final BeehiveTreeDecorator MORE_BEEHIVES_TREES = new BeehiveTreeDecorator(0.05F);
      public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP;
      public static final ConfiguredDecorator<HeightmapDecoratorConfig> TOP_SOLID_HEIGHTMAP;
      public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_WORLD_SURFACE;
      public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_OCEAN_FLOOR;
      public static final ConfiguredDecorator<HeightmapDecoratorConfig> HEIGHTMAP_SPREAD_DOUBLE;
      public static final RangeDecoratorConfig BOTTOM_TO_TOP;
      public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_10;
      public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_8;
      public static final RangeDecoratorConfig BOTTOM_TO_TOP_OFFSET_4;
      public static final RangeDecoratorConfig BOTTOM_TO_60;
      public static final ConfiguredDecorator<?> FIRE;
      public static final ConfiguredDecorator<?> SPREAD_32_ABOVE;
      public static final ConfiguredDecorator<?> HEIGHTMAP_OCEAN_FLOOR_NO_WATER;
      public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER;
      public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP;
      public static final ConfiguredDecorator<?> SQUARE_HEIGHTMAP_SPREAD_DOUBLE;
      public static final ConfiguredDecorator<?> SQUARE_TOP_SOLID_HEIGHTMAP;
      public static final ConfiguredDecorator<?> DARK_OAK_TREE_HEIGHTMAP;

      static {
         HEIGHTMAP = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.MOTION_BLOCKING));
         TOP_SOLID_HEIGHTMAP = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.OCEAN_FLOOR_WG));
         HEIGHTMAP_WORLD_SURFACE = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.WORLD_SURFACE_WG));
         HEIGHTMAP_OCEAN_FLOOR = Decorator.HEIGHTMAP.configure(new HeightmapDecoratorConfig(Heightmap.Type.OCEAN_FLOOR));
         HEIGHTMAP_SPREAD_DOUBLE = Decorator.HEIGHTMAP_SPREAD_DOUBLE.configure(new HeightmapDecoratorConfig(Heightmap.Type.MOTION_BLOCKING));
         BOTTOM_TO_TOP = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.getBottom(), YOffset.getTop()));
         BOTTOM_TO_TOP_OFFSET_10 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(10), YOffset.belowTop(10)));
         BOTTOM_TO_TOP_OFFSET_8 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(8), YOffset.belowTop(8)));
         BOTTOM_TO_TOP_OFFSET_4 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.aboveBottom(4), YOffset.belowTop(4)));
         BOTTOM_TO_60 = new RangeDecoratorConfig(UniformHeightProvider.create(YOffset.getBottom(), YOffset.fixed(60)));
         FIRE = (ConfiguredDecorator)((ConfiguredDecorator)Decorator.RANGE.configure(BOTTOM_TO_TOP_OFFSET_4).spreadHorizontally()).repeatRandomly(5);
         SPREAD_32_ABOVE = Decorator.SPREAD_32_ABOVE.configure(NopeDecoratorConfig.INSTANCE);
         HEIGHTMAP_OCEAN_FLOOR_NO_WATER = HEIGHTMAP_OCEAN_FLOOR.decorate(Decorator.WATER_DEPTH_THRESHOLD.configure(new WaterDepthThresholdDecoratorConfig(0)));
         SQUARE_HEIGHTMAP_OCEAN_FLOOR_NO_WATER = (ConfiguredDecorator)HEIGHTMAP_OCEAN_FLOOR_NO_WATER.spreadHorizontally();
         SQUARE_HEIGHTMAP = (ConfiguredDecorator)HEIGHTMAP.spreadHorizontally();
         SQUARE_HEIGHTMAP_SPREAD_DOUBLE = (ConfiguredDecorator)HEIGHTMAP_SPREAD_DOUBLE.spreadHorizontally();
         SQUARE_TOP_SOLID_HEIGHTMAP = (ConfiguredDecorator)TOP_SOLID_HEIGHTMAP.spreadHorizontally();
         DARK_OAK_TREE_HEIGHTMAP = HEIGHTMAP_OCEAN_FLOOR_NO_WATER.decorate(Decorator.DARK_OAK_TREE.configure(DecoratorConfig.DEFAULT));
      }
   }

   public static final class Configs {
      public static final RandomPatchFeatureConfig GRASS_CONFIG;
      public static final RandomPatchFeatureConfig TAIGA_GRASS_CONFIG;
      public static final RandomPatchFeatureConfig LUSH_GRASS_CONFIG;
      public static final RandomPatchFeatureConfig DEFAULT_FLOWER_CONFIG;
      public static final RandomPatchFeatureConfig DEAD_BUSH_CONFIG;
      public static final RandomPatchFeatureConfig SWEET_BERRY_BUSH_CONFIG;
      public static final RandomPatchFeatureConfig TALL_GRASS_CONFIG;
      public static final RandomPatchFeatureConfig SUGAR_CANE_CONFIG;
      public static final SpringFeatureConfig LAVA_SPRING_CONFIG;
      public static final SpringFeatureConfig ENCLOSED_NETHER_SPRING_CONFIG;
      public static final BlockPileFeatureConfig CRIMSON_ROOTS_CONFIG;
      public static final BlockPileFeatureConfig WARPED_ROOTS_CONFIG;
      public static final BlockPileFeatureConfig NETHER_SPROUTS_CONFIG;

      static {
         GRASS_CONFIG = (new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.GRASS), SimpleBlockPlacer.INSTANCE)).tries(32).build();
         TAIGA_GRASS_CONFIG = (new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.method_35926().add(ConfiguredFeatures.States.GRASS, 1).add(ConfiguredFeatures.States.FERN, 4)), SimpleBlockPlacer.INSTANCE)).tries(32).build();
         LUSH_GRASS_CONFIG = (new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.method_35926().add(ConfiguredFeatures.States.GRASS, 3).add(ConfiguredFeatures.States.FERN, 1)), SimpleBlockPlacer.INSTANCE)).blacklist(ImmutableSet.of(ConfiguredFeatures.States.PODZOL)).tries(32).build();
         DEFAULT_FLOWER_CONFIG = (new RandomPatchFeatureConfig.Builder(new WeightedBlockStateProvider(ConfiguredFeatures.method_35926().add(ConfiguredFeatures.States.POPPY, 2).add(ConfiguredFeatures.States.DANDELION, 1)), SimpleBlockPlacer.INSTANCE)).tries(64).build();
         DEAD_BUSH_CONFIG = (new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE)).tries(4).build();
         SWEET_BERRY_BUSH_CONFIG = (new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(ConfiguredFeatures.States.GRASS_BLOCK.getBlock())).cannotProject().build();
         TALL_GRASS_CONFIG = (new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.TALL_GRASS), new DoublePlantPlacer())).tries(64).cannotProject().build();
         SUGAR_CANE_CONFIG = (new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(ConfiguredFeatures.States.SUGAR_CANE), new ColumnPlacer(BiasedToBottomIntProvider.create(2, 4)))).tries(20).spreadX(4).spreadY(0).spreadZ(4).cannotProject().needsWater().build();
         LAVA_SPRING_CONFIG = new SpringFeatureConfig(ConfiguredFeatures.States.LAVA_FLUID, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF));
         ENCLOSED_NETHER_SPRING_CONFIG = new SpringFeatureConfig(ConfiguredFeatures.States.LAVA_FLUID, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
         CRIMSON_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.method_35926().add(ConfiguredFeatures.States.CRIMSON_ROOTS, 87).add(ConfiguredFeatures.States.CRIMSON_FUNGUS, 11).add(ConfiguredFeatures.States.WARPED_FUNGUS, 1)));
         WARPED_ROOTS_CONFIG = new BlockPileFeatureConfig(new WeightedBlockStateProvider(ConfiguredFeatures.method_35926().add(ConfiguredFeatures.States.WARPED_ROOTS, 85).add(ConfiguredFeatures.States.CRIMSON_ROOTS, 1).add(ConfiguredFeatures.States.WARPED_FUNGUS, 13).add(ConfiguredFeatures.States.CRIMSON_FUNGUS, 1)));
         NETHER_SPROUTS_CONFIG = new BlockPileFeatureConfig(new SimpleBlockStateProvider(ConfiguredFeatures.States.NETHER_SPROUTS));
      }
   }
}
